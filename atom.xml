<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[sunyinghao5438]]></title>
  <subtitle><![CDATA[Geek Football Ingeniousness]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://sunyinghao5438.com//"/>
  <updated>2015-07-17T01:28:20.000Z</updated>
  <id>http://sunyinghao5438.com//</id>
  
  <author>
    <name><![CDATA[5438]]></name>
    <email><![CDATA[sunyinghao5438@gmail.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[关于主题连接Instagram，和Instagram的API]]></title>
    <link href="http://sunyinghao5438.com/2015/07/16/%E5%85%B3%E4%BA%8E%E4%B8%BB%E9%A2%98%E8%BF%9E%E6%8E%A5Instagram/"/>
    <id>http://sunyinghao5438.com/2015/07/16/关于主题连接Instagram/</id>
    <published>2015-07-16T20:18:56.000Z</published>
    <updated>2015-07-17T01:28:20.000Z</updated>
    <content type="html"><![CDATA[<h2 id="感谢">感谢</h2><p>首先要感谢hexo主题制作者 <a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="external">yilia</a> ，致敬！<br>最近有不少人咨询我关于同步 Instagram 相册碰到许多问题。最近正好在学关于 OAuth 2.0，新浪的微博 API 和 一些认证的东西，写此博文作为纪念。</p>
<h2 id="关于这篇文章">关于这篇文章</h2><p>这篇文章主要是关于 <a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="external">yilia</a> 主题内Instagram 图片无法读取提供的一些建议，再聊聊关于Instagram的API的一些极其基础的知识。</p>
<h2 id="Instagram_的API和图片导入Hexo主题">Instagram 的API和图片导入Hexo主题</h2><p>我也是最近才接触关于一些API和Json的知识，如果有错误欢迎大家指出</p>
<h3 id="Register">Register</h3><p>首先登陆 <a href="https://instagram.com/developer/" target="_blank" rel="external">https://instagram.com/developer/</a><br><img src="http://7xjwqy.com1.z0.glb.clouddn.com/Register.jpg" alt="image"><br>注册第一个应用<br><a id="more"></a><br><img src="http://7xjwqy.com1.z0.glb.clouddn.com/signup.jpg" alt="image"><br>注册 Instagram API 用户<br><img src="http://7xjwqy.com1.z0.glb.clouddn.com/registerapi.jpg" alt="image"><br>这边是要注意的是 <strong>Redirect URI(s)</strong> 当用户用你的应用，完成认证（接受或者不接受）后，重定向的网站地址。<br><img src="http://7xjwqy.com1.z0.glb.clouddn.com/completeclients.jpg" alt="image"><br>这个时候我们已经有 <code>client_id</code> 这把钥匙，其实我们已经可以利用API得到一些数据</p>
<h3 id="Authentication">Authentication</h3><p>很多接口我们只需要 <code>client_id</code> 就可以了，但大部分的接口我们需要一个 <code>access_token</code> 的东西。如何得到这个 <code>access_token</code> 是我们要讨论的问题。官方文档有两种方法可以得到 <code>access_token</code></p>
<h6 id="step_1">step 1</h6><p>直接到已经认证了的url，<br>—&gt; 如果用户没有登陆，会要求先登陆，<br>—&gt; 用户会被要求允许使用你的应用去访问他们的Instagram的数据</p>
<h6 id="step_2">step 2</h6><p>你有两种方式让服务器得到 <code>access_token</code><br><strong>Server-side flow（建议）</strong><br>将用户重定向到你的url，拿取代码的参数和并把这个代码发到我们的 <code>access_token</code> url，去换取 <code>access_token</code><br><strong>Implicit flow</strong><br>我们把 <code>access_token</code> 放到url里面，服务器就可以得到 <code>access_token</code> ，但这也会意味着不够安全</p>
<p>这里要重点介绍下 <code>Server-side flow</code></p>
<h6 id="第一步">第一步</h6><p>直接让你的用户到你的验证的url，这边假设你自己就是你的第一个用户，这边会要求你登陆自己的instagram<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://api.instagram.com/oauth/authorize/?client_id=CLIENT-ID&amp;redirect_uri=REDIRECT-URI&amp;response_<span class="built_in">type</span>=code</span><br></pre></td></tr></table></figure></p>
<p><img src="http://7xjwqy.com1.z0.glb.clouddn.com/takeaccess.jpg" alt="image"></p>
<p>要求认证？赶紧批准呗</p>
<h6 id="第二步">第二步</h6><p><img src="http://7xjwqy.com1.z0.glb.clouddn.com/code.jpg" alt="image"></p>
<p>这边第一个马赛克是你的重定向的域名，第二个马赛克就是非常关键的code 会在第三步中使用</p>
<h6 id="第三步">第三步</h6><p>现在你有了code 要去交换你的 <code>access_token</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">https://api.instagram.com/oauth/access_token client_id=</span><br><span class="line">    -F <span class="string">'client_secret=CLIENT_SECRET'</span> \</span><br><span class="line">    -F <span class="string">'grant_type=authorization_code'</span> \</span><br><span class="line">    -F <span class="string">'redirect_uri=AUTHORIZATION_REDIRECT_URI'</span> \</span><br><span class="line">    -F <span class="string">'code=CODE'</span> \</span><br></pre></td></tr></table></figure></p>
<p>把这个上面的代码自己该下，然后贴到 Terminal 里，你会发现你要的 <code>access_token</code> 出现了<br><img src="http://7xjwqy.com1.z0.glb.clouddn.com/codechuxian.jpg" alt="image"><br>会出现下面的页面<br><img src="http://7xjwqy.com1.z0.glb.clouddn.com/layoutofuseaccess.jpg" alt="image"></p>
<p>还有一种方法是 <strong>Implicit flow</strong> 因为个人觉得不太安全，但是确实是方便很多<br><a href="http://litten.github.io/2014/03/03/instagram-api-ex/" target="_blank" rel="external">戳这里</a>有教程！</p>
<h3 id="Requests">Requests</h3><p>有了这个 <code>access_token</code> 世界突然变得光明了起来！<br>去这里 <a href="https://apigee.com/embed/console/instagram?apig_cc=1" target="_blank" rel="external">https://apigee.com/embed/console/instagram?apig_cc=1</a></p>
<p>选择 <strong>users/{user-id}/media/recent</strong> 这个方法，填完你的 <code>user-id</code> 然后send<br>你会发现 <code>This Method needs Authentication. Please select an Authentication scheme.</code><br>说明这个方法要需要认证的机制，那就在 <code>Authentication</code> 下选择 <code>OAuth 2.0</code><br>然后填写完你的 <code>user-id</code> 赶紧的send吧</p>
<p><img src="http://7xjwqy.com1.z0.glb.clouddn.com/testaccess.jpg" alt="image"><br>尼玛为什么还是不可以<br>这边就日了个狗，<strong>查了一些资料发现 <code>user-id</code> 和你的用户名不是一个东西！</strong><br>虽然不知道是根据什么机制，这个非官方的网站可以轻而易举的获得你的 <code>user-id</code><br><a href="http://jelled.com/instagram/lookup-user-id" target="_blank" rel="external">http://jelled.com/instagram/lookup-user-id</a><br>具体是根据什么原理，我以后会解释。<br>终于！！！<br><img src="http://7xjwqy.com1.z0.glb.clouddn.com/testchenggong.jpg" alt="image"><br>然后在浏览器里面输入你要send的东西 满满的喜悦感！你已经拿到了你自己的相册的Json数据库。</p>
<h3 id="最后一步，配置你的主题，并显示Instagram">最后一步，配置你的主题，并显示Instagram</h3><p>这里已经不再重要了，因为你应该已经 掌握了API的知识<br><a href="https://github.com/litten/hexo-theme-yilia/wiki/%E5%90%8C%E6%AD%A5%E4%BD%A0%E7%9A%84instagram%E5%9B%BE%E7%89%87" target="_blank" rel="external">戳这里告诉你</a><br>好啦，恭喜你，你的Instagram相册已经显示！</p>
<h3 id="补充知识">补充知识</h3><p>这里不得不要提一下 OAuth 2.0 到底是一个什么样的东西，比如新浪的API 也采用了OAuth 2.0，到底和OAuth 1.0 有什么区别呢？这里我采用了知乎里的答案<br><em>采用xAuth认证的桌面应用和移动应用可以跳过oauth/request_token（获取Request Token）以及oauth/authorize（授权Request Token）两步，只要提供了username和password以后，即可直接通过oauth/access_token接口得到Access Token。<br>这样做的好处是客户端可以直接使用Native界面来定制和显示授权页面，而原始的OAuth则必须到服务商的WEB页面去进行授权，用户体验会比xAuth要差<br>OAuth 2.0是OAuth协议的下一版本，但不向后兼容OAuth 1.0。 OAuth 2.0关注客户端开发者的简易性，同时为Web应用，桌面应用和手机，和起居室设备提供专门的认证流程。</em><br>来自 <a href="http://www.zhihu.com/people/chen-yi-hu" target="_blank" rel="external">陈翼虎</a><br>如果要了解具体的知识可以 <a href="http://huoding.com/2011/11/08/126" target="_blank" rel="external">戳我</a></p>
]]></content>
    <summary type="html">
    <![CDATA[关于主题连接Instagram]]>
    
    </summary>
    
      <category term="Instagram" scheme="http://sunyinghao5438.com/tags/Instagram/"/>
    
      <category term="图片" scheme="http://sunyinghao5438.com/tags/%E5%9B%BE%E7%89%87/"/>
    
      <category term="连接" scheme="http://sunyinghao5438.com/tags/%E8%BF%9E%E6%8E%A5/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[跟sun学swift(四)]]></title>
    <link href="http://sunyinghao5438.com/2015/07/01/%E8%B7%9Fsun%E5%AD%A6swift(%E5%9B%9B)/"/>
    <id>http://sunyinghao5438.com/2015/07/01/跟sun学swift(四)/</id>
    <published>2015-07-01T10:08:43.000Z</published>
    <updated>2015-07-03T00:59:22.000Z</updated>
    <content type="html"><![CDATA[<p>今天要讲的是一些比较基础的知识。</p>
<h1 id="enum">enum</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">enum Optional&lt;T&gt;&#123;</span><br><span class="line">	<span class="keyword">case</span> None</span><br><span class="line">	<span class="keyword">case</span> Some(T)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第一个例子<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> x: String?=nil</span><br></pre></td></tr></table></figure></p>
<p>等价于<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> x = Optional&lt;String&gt;.None</span><br></pre></td></tr></table></figure></p>
<p>第二个例子<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> x: String?=“hello”</span><br></pre></td></tr></table></figure></p>
<p>等价于<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> x = Optional&lt;String&gt;.Some(<span class="string">"hello"</span>)</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>接下来是一个解包的过程<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">switch x&#123;</span><br><span class="line">	<span class="keyword">case</span> Some(<span class="built_in">let</span> value): y = value</span><br><span class="line">	<span class="keyword">case</span> None: //这边会报错</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这个例子很好解释了用 <code>enum</code> 实现 <code>Optional</code> ，也对 <code>Optional</code> 有更好的理解，值得细细品味。</p>
<h1 id="Array">Array</h1><p>中文教程<a href="http://numbbbbb.gitbooks.io/-the-swift-programming-language-/content/chapter2/04_Collection_Types.html#arrays" target="_blank" rel="external">戳这里</a><br>除此之外，使用加法赋值运算符 <code>+=</code> 也可以直接在数组后面添加一个或多个拥有相同类型的数据项<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var animals=[<span class="string">"Giraffe"</span>,<span class="string">"Cow"</span>,<span class="string">"Doggie"</span>,<span class="string">"Bird"</span>]</span><br><span class="line">animals += [<span class="string">"Pig"</span>]</span><br></pre></td></tr></table></figure></p>
<p>数组的遍历<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> shoppingList &#123;</span><br><span class="line">    println(item)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>感觉现在的新语言遍历都是用这种方式说实话还是怀念以前C语言的 <code>for(i=0;i&lt;=1;i++)</code> </p>
<h1 id="Dictionary">Dictionary</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var animals = Dictionary&lt;String, Int&gt;()</span><br></pre></td></tr></table></figure>
<p>等价于<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var animals = [String, Int]()</span><br></pre></td></tr></table></figure></p>
<p>再举一个例子<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">animals = [<span class="string">"Pig"</span>:<span class="number">1</span>, <span class="string">"Fish"</span>:<span class="number">2</span>]</span><br><span class="line"><span class="built_in">let</span> animal= animals[<span class="string">"Cow"</span>]</span><br></pre></td></tr></table></figure></p>
<p>这个时候系统会返回一个 <code>nil</code> 因为字典里面没有 <code>Cow</code></p>
<p>字典的遍历<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (key, value) <span class="keyword">in</span> animals&#123;</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">"\(key)=\(value)"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>反正就是怎么简单怎么来</p>
<h1 id="Range">Range</h1><p>我个人感觉就是一把尺子，有起点终点。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">struct Range&lt;T&gt; &#123;</span><br><span class="line">	var startIndex: T</span><br><span class="line">	var endIndex: T</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>关于 <code>Rang</code> 的赋值：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> array = [<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>]</span><br><span class="line"><span class="built_in">let</span> subArray1 = array[<span class="number">2</span>...<span class="number">3</span>]// subArray1 will be [<span class="string">"c"</span>,d<span class="string">""</span>]</span><br><span class="line"><span class="built_in">let</span> subArray2 = array[<span class="number">2</span>..&lt;<span class="number">2</span>]// subArray2 will be [<span class="string">"c"</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">27</span>...<span class="number">104</span>] &#123;&#125;      // Range is enumeratable, like Array, String, Dictionary</span><br></pre></td></tr></table></figure></p>
<h1 id="NSObject">NSObject</h1><p>一句话总结，就是最叼对基础的一个类，大家都可以继承他</p>
<h1 id="NSNumber,NSDATA">NSNumber,NSDATA</h1><p>大家去看官方的教程吧，比我介绍的要靠谱的多</p>
<h1 id="Properties">Properties</h1>]]></content>
    <summary type="html">
    <![CDATA[swift学习笔记]]>
    
    </summary>
    
      <category term="Learning" scheme="http://sunyinghao5438.com/tags/Learning/"/>
    
      <category term="Stanford" scheme="http://sunyinghao5438.com/tags/Stanford/"/>
    
      <category term="Xcode" scheme="http://sunyinghao5438.com/tags/Xcode/"/>
    
      <category term="iOS" scheme="http://sunyinghao5438.com/tags/iOS/"/>
    
      <category term="swift" scheme="http://sunyinghao5438.com/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[跟sun学swift(三)]]></title>
    <link href="http://sunyinghao5438.com/2015/06/29/%E8%B7%9Fsun%E5%AD%A6swift(%E4%B8%89)/"/>
    <id>http://sunyinghao5438.com/2015/06/29/跟sun学swift(三)/</id>
    <published>2015-06-29T15:44:58.000Z</published>
    <updated>2015-06-29T14:55:23.000Z</updated>
    <content type="html"><![CDATA[<h1 id="枚举（Enumerations）">枚举（Enumerations）</h1><p><a href="http://numbbbbb.gitbooks.io/-the-swift-programming-language-/content/chapter2/08_Enumerations.html" target="_blank" rel="external">戳这里</a>可以看官方的枚举说明。非常非常详细，再次给翻译组点一个大大赞！</p>
<h1 id="类和结构体">类和结构体</h1><p>数组和字典在Swift里面是结构体，Swift里面的结构体看起来非常像类，他们可以有方法，它们甚至拥有带有存储方法的属性。我个人也是花了蛮长时间去研究这两个之间的区别。看来白胡子的视频更加坚定了我的结论。<br>类和结构体有两个最大的不同：<br><strong>1. 类是可以继承的，结构体是不可以的</strong><br><strong>2. 结构体传的时候是值，而类传递的是引用</strong><br><a id="more"></a><br>这边对引用和值不是很清楚的，可以自行百度下，顺便恶补下C++里指针</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">func evaluate(ops: [Op]) -&gt; (result: Double?, remainingOps: [Op])&#123;</span><br><span class="line">    <span class="keyword">if</span> !ops.isEmpty&#123;</span><br><span class="line">    	<span class="built_in">let</span> op = ops.removeLast()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> (nil, ops)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这边的 <code>ops</code> 是一个结构体，在你传递的参数前面其实隐约加了一个 <code>let</code>。这样ops就是一个 read only的，一个只读的数组是不能进行修改的。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">func evaluate(var ops: [Op]) -&gt; (result: Double?, remainingOps: [Op])&#123;</span><br><span class="line">    <span class="keyword">if</span> !ops.isEmpty&#123;</span><br><span class="line">    	<span class="built_in">let</span> op = ops.removeLast()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> (nil, ops)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>其实可以在 <code>ops</code> 前面加一个 <code>var</code> 这样这边的 <code>ops</code> 就变成了一个可变的数组了。但其实这边的ops是一个可变的副本，一个可以让你操作的<code>ops</code>。有点绕口，可以简单的理解又克隆了一个 <code>ops</code> 让你随意蹂躏。但这么做会让代码的可读性大大降低。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">func evaluate(ops: [Op]) -&gt; (result: Double?, remainingOps: [Op])&#123;</span><br><span class="line">    <span class="keyword">if</span> !ops.isEmpty&#123;</span><br><span class="line">        var remainingOps = ops</span><br><span class="line">        <span class="built_in">let</span> op = remainingOps.removeLast()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> (nil, ops)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>解决方案是再建立一个 <code>remainingOps</code> 来得到 <code>ops</code> 的值，现在我们就有一个可变的数组 <code>remainingOps</code></p>
<p>既然这个话题了，我就想继续深入下， 如果 <code>ops</code> 很大很大，读者可能会觉得一个数字复制了一次之后会占空间，使程序非常慢。但其实swift 非常非常的smart，他像传入一个指针（个人理解），进行记录。当真正进行<code>remainingOps.removeLast()</code> 的时候，swift其实也不会对数组再重新复制一次，可能是某个节点记性记录。</p>
<h1 id="下划线underbar">下划线underbar</h1><p>下划线在swift里面是一种 “我不关心这个” 的通常表达，在今后会写一篇博客具体介绍 <code>_</code> 和 <code>#</code> 各种妙用。这也是swift 比较性感的一面。</p>
<h1 id="Swift_1-0_和_Swift_2-0_区别">Swift 1.0 和 Swift 2.0 区别</h1><p>注意Printable协议现在被命名为CustomStringConvertible，而大多数的Foundation对象都遵循Printable协议。有了协议扩展之，你可以用自定义功能来扩展系统。相比于向很多类、结构体和枚举添加少量的自定义代码，你可以编写一个通用实现，然后应用到不同的数据类型。<br>比如 <code>enum</code> 中需要 <code>description</code></p>
<p>swift 1.0<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">private enum Op: Printable</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">case</span> Operand(Double)</span><br><span class="line">    <span class="keyword">case</span> UnaryOperation(String, Double -&gt; Double)</span><br><span class="line">    <span class="keyword">case</span> BinaryOperation(String, (Double,Double) -&gt; Double)</span><br><span class="line">    </span><br><span class="line">    var description: String&#123;</span><br><span class="line">        get&#123;</span><br><span class="line">            switch self&#123;</span><br><span class="line">            <span class="keyword">case</span> .Operand(<span class="built_in">let</span> operand):</span><br><span class="line">                <span class="built_in">return</span> <span class="string">"\(operand)"</span></span><br><span class="line">            <span class="keyword">case</span> .BinaryOperation(<span class="built_in">let</span> symbol, _):</span><br><span class="line">                <span class="built_in">return</span> symbol</span><br><span class="line">            <span class="keyword">case</span> .UnaryOperation(<span class="built_in">let</span> symbol, _):</span><br><span class="line">                <span class="built_in">return</span> symbol</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>swift 2.0</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">private enum Op: CustomStringConvertible</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">case</span> Operand(Double)</span><br><span class="line">    <span class="keyword">case</span> UnaryOperation(String, Double -&gt; Double)</span><br><span class="line">    <span class="keyword">case</span> BinaryOperation(String, (Double,Double) -&gt; Double)</span><br><span class="line">    </span><br><span class="line">    var description: String&#123;</span><br><span class="line">        get&#123;</span><br><span class="line">            switch self&#123;</span><br><span class="line">            <span class="keyword">case</span> .Operand(<span class="built_in">let</span> operand):</span><br><span class="line">                <span class="built_in">return</span> <span class="string">"\(operand)"</span></span><br><span class="line">            <span class="keyword">case</span> .BinaryOperation(<span class="built_in">let</span> symbol, _):</span><br><span class="line">                <span class="built_in">return</span> symbol</span><br><span class="line">            <span class="keyword">case</span> . UnaryOperation(<span class="built_in">let</span> symbol, _):</span><br><span class="line">                <span class="built_in">return</span> symbol</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="函数里面再加函数">函数里面再加函数</h1><p>swift 允许函数里面在加函数，目前不知道有什么具体带来什么编程上面的遍历，暂且认为会影响可读性。</p>
<p>好啦，今天就先到这里吧<br><a href="https://github.com/sunyinghao5438/Calculator-swift" target="_blank" rel="external">代码下载</a></p>
]]></content>
    <summary type="html">
    <![CDATA[swift学习笔记]]>
    
    </summary>
    
      <category term="Learning" scheme="http://sunyinghao5438.com/tags/Learning/"/>
    
      <category term="Stanford" scheme="http://sunyinghao5438.com/tags/Stanford/"/>
    
      <category term="Xcode" scheme="http://sunyinghao5438.com/tags/Xcode/"/>
    
      <category term="iOS" scheme="http://sunyinghao5438.com/tags/iOS/"/>
    
      <category term="swift" scheme="http://sunyinghao5438.com/tags/swift/"/>
    
      <category term="类" scheme="http://sunyinghao5438.com/tags/%E7%B1%BB/"/>
    
      <category term="结构体" scheme="http://sunyinghao5438.com/tags/%E7%BB%93%E6%9E%84%E4%BD%93/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[跟sun学swift(二)]]></title>
    <link href="http://sunyinghao5438.com/2015/06/25/%E8%B7%9Fsun%E5%AD%A6swift(%E4%BA%8C)/"/>
    <id>http://sunyinghao5438.com/2015/06/25/跟sun学swift(二)/</id>
    <published>2015-06-25T10:18:56.000Z</published>
    <updated>2015-06-25T17:25:32.000Z</updated>
    <content type="html"><![CDATA[<h2 id="MVC">MVC</h2><p><img src="http://7xjwqy.com1.z0.glb.clouddn.com/mvc.jpg" alt="image"><br>其实蛮心疼 白胡子爷爷的，每年的iOS都要复习一次MVC。这边我就不加详细介绍MVC了，但是如果是对MVC不是很熟悉的，一定需要看正规大牛的MVC详解，对今后的编程非常有帮助</p>
<h2 id="感叹号&amp;问号">感叹号&amp;问号</h2><p><strong>!</strong><br>这个惊叹号表示“我知道这个可选有值，请使用它。”这被称为可选值的强制解析（forced unwrapping）<br><strong>?</strong><br>问号暗示包含的值是可选类型，举个🍐<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var 我是可选类型: Int? = <span class="number">404</span></span><br></pre></td></tr></table></figure></p>
<p>也就是说 <code>我是可选类型</code> 可能包含Int值也可能不包含值。这里要注意，<code>我是可选类型</code> 不可能是其他类型比如 <code>Bool</code> 值或者 <code>String</code>，只可能是 <code>Int</code>或者 <code>什么都没有</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我是可选类型 = nil</span><br></pre></td></tr></table></figure></p>
<p>神奇的事情发生了，<code>我是可选类型</code> 变成了nil，可以这么理解， <code>我是可选类型</code> 充当了一个墙头草的角色，可以随时进行转变。<br><a id="more"></a><br><strong>注意：<br>Swift 的nil和 Objective-C 中的nil并不一样。在 Objective-C 中，nil是一个指向不存在对象的指针。在 Swift 中，nil不是指针——它是一个确定的值，用来表示值缺失。任何类型的可选状态都可以被设置为nil，不只是对象类型。</strong></p>
<h2 id="继续Calculator">继续Calculator</h2><h3 id="函数重载">函数重载</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">func preformOperation(operation: (Double, Double) -&gt; Double)&#123;</span><br><span class="line">    <span class="keyword">if</span> operandStack.count &gt;= <span class="number">2</span> &#123;</span><br><span class="line">        displayValue = operation(operandStack.removeLast(),operandStack.removeLast())</span><br><span class="line">        enter()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">func preformOperation(operation: Double -&gt; Double)&#123;</span><br><span class="line">    <span class="keyword">if</span> operandStack.count &gt;= <span class="number">1</span> &#123;</span><br><span class="line">        displayValue = operation(operandStack.removeLast())</span><br><span class="line">        enter()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Method ‘performOperation’ with Objective-C selector ‘performOperation:’ conflicts with previous declaration with the same Objective-C selector<br>编译器会提示报错，这边我一直很困惑。其实这边代码继承了<code>UIViewController</code> 这是一个Object-C的类，然而Object-C是不支持重载的。如果你不继承一个 Object-C的类，这个代码是没有问题，所以swift是支持函数的重载。<br>解决办法：</p>
<pre><code class="bash">func preformOperation(operation: (Double, Double) -&gt; Double){
    <span class="keyword">if</span> operandStack.count &gt;= <span class="number">2</span> {
        displayValue = operation(operandStack.removeLast(),operandStack.removeLast())
        enter()
    }
}
private func preformOperation(operation: Double -&gt; Double){
    <span class="keyword">if</span> operandStack.count &gt;= <span class="number">1</span> {
        displayValue = operation(operandStack.removeLast())
        enter()
    }
}
</code></pre>
<p>把一个设置成私有的可以解决这个问题。（有点傻逼）</p>
<p><a href="https://github.com/sunyinghao5438/Calculator-swift" target="_blank" rel="external">代码下载</a></p>
]]></content>
    <summary type="html">
    <![CDATA[swift学习笔记]]>
    
    </summary>
    
      <category term="Learning" scheme="http://sunyinghao5438.com/tags/Learning/"/>
    
      <category term="Stanford" scheme="http://sunyinghao5438.com/tags/Stanford/"/>
    
      <category term="Xcode" scheme="http://sunyinghao5438.com/tags/Xcode/"/>
    
      <category term="iOS" scheme="http://sunyinghao5438.com/tags/iOS/"/>
    
      <category term="swift" scheme="http://sunyinghao5438.com/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[跟sun学swift(一)]]></title>
    <link href="http://sunyinghao5438.com/2015/06/24/%E8%B7%9Fsun%E5%AD%A6swift(%E4%B8%80)/"/>
    <id>http://sunyinghao5438.com/2015/06/24/跟sun学swift(一)/</id>
    <published>2015-06-24T10:36:41.000Z</published>
    <updated>2015-06-25T15:43:11.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://7xjwqy.com1.z0.glb.clouddn.com/swift_coffee.png" alt="image"></p>
<h2 id="写在前面">写在前面</h2><p>这个系列的博客想记录下最近这段时间学习swift的平台，也想更多人参与讨论学习swift和iOS开发。学习教材是斯坦福大学的 iOS 8教程。老师是：Paul Hegarty，很喜欢这个白胡子老爷爷。博主有半年时间的iOS开发经验，希望和大家一起学习这个语言</p>
<h2 id="第一个swift程序：Calculator">第一个swift程序：Calculator</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import UIKit</span><br><span class="line">class ViewController: UIViewController &#123;</span><br><span class="line">	@IBOutlet weak var display: UILabel!</span><br><span class="line">	var userIsInTheMiddleOfTypingANumber: Bool = <span class="literal">false</span></span><br><span class="line">	@IBAction func appendDigit(sender: UIButton) &#123;</span><br><span class="line">	    <span class="built_in">let</span> digit = sender.currentTitle!</span><br><span class="line">	    <span class="keyword">if</span> userIsInTheMiddleOfTypingANumber&#123;</span><br><span class="line">	        display.text = display.text! + digit</span><br><span class="line">	    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	        display.text=digit</span><br><span class="line">	        userIsInTheMiddleOfTypingANumber=<span class="literal">true</span></span><br><span class="line">	    &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>Swift 说实话比起Obj-c要友善太多，看着上面几行代码，一般有程序基础的人都可以非常清楚的读懂代码，但是也会发出质疑，那个_感叹号！_到底是什么意思？</p>
<h2 id="感叹号">感叹号</h2><p>Swift语言使用var定义变量，但和别的语言不同，Swift里不会自动给变量赋初始值，也就是说变量不会有默认值，所以要求使用变量之前必须要对其初始化。如果在使用变量之前不进行初始化就会报错。</p>
<p><strong>Swift增加了optional型别，用于处理值不存在的情况。optional表示「那儿有一个值，并且它等于x 」或者「那儿没有值」。</strong></p>
<p>当你确定可选类型确实包含值之后，你可以在可选的名字后面加一个_！_来获取值。这个惊叹号表示“我知道这个可选有值，请使用它。”这被称为可选值的强制解析（forced unwrapping）<br>具体关于这方面可以看官方<a href="http://numbbbbb.gitbooks.io/-the-swift-programming-language-/content/chapter2/01_The_Basics.html#optionals" title="optionals" target="_blank" rel="external">说明文档</a></p>
<h2 id="声明常量和变量">声明常量和变量</h2><p>常量和变量必须在使用前声明，用let来声明常量，用var来声明变量。看下面例子</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> wobuhuibian = <span class="number">0</span></span><br><span class="line">var wohuibian = <span class="number">0</span></span><br></pre></td></tr></table></figure>
<ol>
<li>let 申明的 wobuhuibian 就是永远不会变</li>
<li>var 申明的 wohuibian 在下面的程序中的一些操作，可以使数值改变</li>
</ol>
<p>严格以上这个是一个很小的改进，但是对于程序员阅读代码的时候意义非凡。如果知道一个数值用let定义一个数值那它一辈子都不会变。虽然很多代码可以用const之类的来定义，但感觉上就没有let那么简单直白。还有幸运的事情是，常量和变量你都可以用Unicode字符来定义。举个🍐</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> π = <span class="number">3.14159</span></span><br><span class="line">var 我会变 = <span class="number">0</span></span><br><span class="line"><span class="built_in">let</span> 我不会变 = <span class="number">0</span></span><br><span class="line"><span class="built_in">let</span> 🐒= <span class="string">"monkey"</span></span><br><span class="line"><span class="built_in">let</span> 🌚= <span class="string">"blackface"</span></span><br><span class="line"><span class="built_in">let</span> 🐶= <span class="string">"dog"</span></span><br></pre></td></tr></table></figure>
<p>好啦，今天的学习就到这里。</p>
<p><a href="https://github.com/sunyinghao5438/Calculator-swift" title="代码下载" target="_blank" rel="external">代码下载</a></p>
]]></content>
    <summary type="html">
    <![CDATA[swift学习笔记]]>
    
    </summary>
    
      <category term="Learning" scheme="http://sunyinghao5438.com/tags/Learning/"/>
    
      <category term="Stanford" scheme="http://sunyinghao5438.com/tags/Stanford/"/>
    
      <category term="Xcode" scheme="http://sunyinghao5438.com/tags/Xcode/"/>
    
      <category term="iOS" scheme="http://sunyinghao5438.com/tags/iOS/"/>
    
      <category term="swift" scheme="http://sunyinghao5438.com/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World！]]></title>
    <link href="http://sunyinghao5438.com/2015/06/23/hello-world/"/>
    <id>http://sunyinghao5438.com/2015/06/23/hello-world/</id>
    <published>2015-06-23T10:18:56.000Z</published>
    <updated>2015-06-25T15:41:14.000Z</updated>
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"Hello World!"</span>);</span><br></pre></td></tr></table></figure>
<p><img src="http://7xjwqy.com1.z0.glb.clouddn.com/IMG_0461.jpg" alt="image"></p>
<p>和这个美好的世界say hi.<br><a id="more"></a></p>
]]></content>
    <summary type="html">
    <![CDATA[hello world!博客第一天的第一篇文章]]>
    
    </summary>
    
      <category term="aboutme" scheme="http://sunyinghao5438.com/tags/aboutme/"/>
    
      <category term="pug" scheme="http://sunyinghao5438.com/tags/pug/"/>
    
  </entry>
  
</feed>